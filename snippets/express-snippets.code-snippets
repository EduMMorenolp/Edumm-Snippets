{
  "Express": {
    "prefix": ["edumm-express-server-ES6"],
    "body": [
      "import express from 'express'",
      "",
      "const app = express();",
      "const PORT = process.env.PORT || 3000;",
      "",
      "app.get('/', (req, res) => res.send('Hello World!'))",
      "",
      "app.listen(PORT, () => {",
      "console.log('\n==================================================')",
      " console.log(`🚀 Servidor corriendo en: http://localhost:${PORT}`)",
      "console.log('\n==================================================')",
      "});"
    ],
    "description": "Express-Server"
  },
  "Express Route": {
    "prefix": ["edumm-express-route"],
    "body": [
      "app.${1:get}('${2:/ruta}', (req, res) => {",
      "\tres.send('${3:Respuesta}');",
      "});"
    ],
    "description": "Crear una ruta básica en Express."
  },
  "Express Routes CRUD": {
    "prefix": ["edumm-express-routes-crud-ES6"],
    "body": [
      "import { Router } from 'express';",
      "import { ${3} } from '../controllers/${2}';",
      "",
      "const router = Router();",
      "",
      "router.get('/${1}', ${4});",
      "",
      "router.get('/${1}/:id', ${5});",
      "",
      "router.post('/${1}', ${6});",
      "",
      "router.put('/${1}/:id', ${7});",
      "",
      "router.delete('/${1}/:id',${8});"
    ],
    "description": "Crear rutas básicas en Express."
  },
  "Express Middleware": {
    "prefix": ["edumm-express-middleware-base"],
    "body": [
      "app.use((req, res, next) => {",
      "\t// Tu middleware aquí",
      "\tnext();",
      "});"
    ],
    "description": "Crear un middleware báse en Express."
  },
  "Express Error Handling": {
    "prefix": ["edumm-express-error"],
    "body": [
      "app.use((err, req, res, next) => {",
      "\tconsole.error(err.stack);",
      "\tres.status(500).send('Algo salió mal!');",
      "});"
    ],
    "description": "Manejo de errores básico en Express."
  },
  "Express Body Parser Middleware": {
    "prefix": ["edumm-express-body-parser"],
    "body": [
      "import { bodyParser } from 'body-parser';",
      "",
      "app.use(bodyParser.json());",
      "app.use(bodyParser.urlencoded({ extended: false }));"
    ],
    "description": "Middleware para analizar el cuerpo de las solicitudes en Express."
  },
  "Express Static Files": {
    "prefix": ["edumm-express-static"],
    "body": ["app.use(express.static(path.join(__dirname, '${1:public}')));"],
    "description": "Servir archivos estáticos en Express."
  },
  "Express View Engine": {
    "prefix": ["edumm-express-view"],
    "body": [
      "app.set('views', path.join(__dirname, '${1:views}'));",
      "app.set('view engine', '${2:pug}');"
    ],
    "description": "Configurar vistas y motor de plantillas en Express."
  },
  "Express CORS Configuration": {
    "prefix": ["edumm-express-cors"],
    "body": ["import cors from 'cors';", "", "app.use(cors());"],
    "description": "Configurar CORS en Express."
  },
  "Express Session Middleware": {
    "prefix": ["edumm-express-session"],
    "body": [
      "import session from 'express-session'",
      "",
      "app.use(session({",
      "\tsecret: '${1:mySecret}',",
      "\tresave: false,",
      "\tsaveUninitialized: true",
      "}));"
    ],
    "description": "Middleware para manejar sesiones en Express."
  },
  "Express Morgan Logging": {
    "prefix": ["edumm-express-morgan"],
    "body": [
      "import morgan from 'morgan';",
      "",
      "// Configurar Morgan para registrar las solicitudes HTTP",
      "app.use(morgan('dev'));"
    ],
    "description": "Configurar Morgan para registrar solicitudes HTTP en Express usando ES6."
  },
  "Express Controller Base": {
    "prefix": ["edumm-express-mongo-controller"],
    "body": [
      "// Importar el modelo necesario",
      "import ${1:Model} from '../models/${2:modelName}.js';",
      "",
      "// Obtener todos los elementos",
      "export const getAll${1} = async (req, res) => {",
      "  try {",
      "    const items = await ${1:Model}.find();",
      "    res.status(200).json(items);",
      "  } catch (error) {",
      "    res.status(500).json({ message: 'Error al obtener elementos' });",
      "  }",
      "};",
      "",
      "// Obtener un elemento por ID",
      "export const get${1}ById = async (req, res) => {",
      "  try {",
      "    const item = await ${1:Model}.findById(req.params.id);",
      "    if (!item) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(200).json(item);",
      "  } catch (error) {",
      "    res.status(500).json({ message: 'Error al obtener el elemento' });",
      "  }",
      "};",
      "",
      "// Crear un nuevo elemento",
      "export const create${1} = async (req, res) => {",
      "  try {",
      "    const newItem = new ${1:Model}(req.body);",
      "    await newItem.save();",
      "    res.status(201).json(newItem);",
      "  } catch (error) {",
      "    res.status(400).json({ message: 'Error al crear el elemento' });",
      "  }",
      "};",
      "",
      "// Actualizar un elemento por ID",
      "export const update${1} = async (req, res) => {",
      "  try {",
      "    const updatedItem = await ${1:Model}.findByIdAndUpdate(req.params.id, req.body, { new: true });",
      "    if (!updatedItem) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(200).json(updatedItem);",
      "  } catch (error) {",
      "    res.status(400).json({ message: 'Error al actualizar el elemento' });",
      "  }",
      "};",
      "",
      "// Eliminar un elemento por ID",
      "export const delete${1} = async (req, res) => {",
      "  try {",
      "    const deletedItem = await ${1:Model}.findByIdAndDelete(req.params.id);",
      "    if (!deletedItem) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(204).send();",
      "  } catch (error) {",
      "    res.status(500).json({ message: 'Error al eliminar el elemento' });",
      "  }",
      "};"
    ],
    "description": "Estructura básica para un controlador que maneja operaciones CRUD en un modelo de Mongoose."
  },
  "Express MySQL Controller Base": {
    "prefix": ["edumm-express-mysql-controller"],
    "body": [
      "// Importar el módulo de MySQL",
      "import mysql from 'mysql';",
      "",
      "// Configurar la conexión a la base de datos",
      "const connection = mysql.createConnection({",
      "  host: '${1:localhost}',",
      "  user: '${2:usuario}',",
      "  password: '${3:contraseña}',",
      "  database: '${4:base_de_datos}'",
      "});",
      "",
      "// Conectar a la base de datos",
      "connection.connect(err => {",
      "  if (err) throw err;",
      "  console.log('Conectado a la base de datos MySQL.');",
      "});",
      "",
      "// Obtener todos los elementos",
      "export const getAll${5:items} = (req, res) => {",
      "  connection.query('SELECT * FROM ${6:table}', (error, results) => {",
      "    if (error) return res.status(500).json({ message: 'Error al obtener elementos' });",
      "    res.status(200).json(results);",
      "  });",
      "};",
      "",
      "// Obtener un elemento por ID",
      "export const get${5:item}ById = (req, res) => {",
      "  const id = req.params.id;",
      "  connection.query('SELECT * FROM ${6:table} WHERE id = ?', [id], (error, results) => {",
      "    if (error) return res.status(500).json({ message: 'Error al obtener el elemento' });",
      "    if (results.length === 0) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(200).json(results[0]);",
      "  });",
      "};",
      "",
      "// Crear un nuevo elemento",
      "export const create${5:item} = (req, res) => {",
      "  const newItem = req.body;",
      "  connection.query('INSERT INTO ${6:table} SET ?', newItem, (error, results) => {",
      "    if (error) return res.status(400).json({ message: 'Error al crear el elemento' });",
      "    res.status(201).json({ id: results.insertId, ...newItem });",
      "  });",
      "};",
      "",
      "// Actualizar un elemento por ID",
      "export const update${5:item} = (req, res) => {",
      "  const id = req.params.id;",
      "  const updatedItem = req.body;",
      "  connection.query('UPDATE ${6:table} SET ? WHERE id = ?', [updatedItem, id], (error, results) => {",
      "    if (error) return res.status(400).json({ message: 'Error al actualizar el elemento' });",
      "    if (results.affectedRows === 0) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(200).json({ message: 'Elemento actualizado' });",
      "  });",
      "};",
      "",
      "// Eliminar un elemento por ID",
      "export const delete${5:item} = (req, res) => {",
      "  const id = req.params.id;",
      "  connection.query('DELETE FROM ${6:table} WHERE id = ?', [id], (error, results) => {",
      "    if (error) return res.status(500).json({ message: 'Error al eliminar el elemento' });",
      "    if (results.affectedRows === 0) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(204).send();",
      "  });",
      "};"
    ],
    "description": "Estructura básica para un controlador que maneja operaciones CRUD en una base de datos MySQL."
  },
  "Express Prisma Controller Base": {
    "prefix": ["edumm-express-prisma-controller"],
    "body": [
      "// Importar Prisma Client",
      "import { PrismaClient } from '@prisma/client';",
      "",
      "// Crear una instancia de Prisma Client",
      "const prisma = new PrismaClient();",
      "",
      "// Obtener todos los elementos",
      "export const getAll${1:items} = async (req, res) => {",
      "  try {",
      "    const items = await prisma.${1:Item}.findMany();",
      "    res.status(200).json(items);",
      "  } catch (error) {",
      "    res.status(500).json({ message: 'Error al obtener elementos' });",
      "  }",
      "};",
      "",
      "// Obtener un elemento por ID",
      "export const get${1:item}ById = async (req, res) => {",
      "  const id = parseInt(req.params.id);",
      "  try {",
      "    const item = await prisma.${1:Item}.findUnique({ where: { id } });",
      "    if (!item) return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(200).json(item);",
      "  } catch (error) {",
      "    res.status(500).json({ message: 'Error al obtener el elemento' });",
      "  }",
      "};",
      "",
      "// Crear un nuevo elemento",
      "export const create${1:item} = async (req, res) => {",
      "  const newItem = req.body;",
      "  try {",
      "    const item = await prisma.${1:Item}.create({ data: newItem });",
      "    res.status(201).json(item);",
      "  } catch (error) {",
      "    res.status(400).json({ message: 'Error al crear el elemento' });",
      "  }",
      "};",
      "",
      "// Actualizar un elemento por ID",
      "export const update${1:item} = async (req, res) => {",
      "  const id = parseInt(req.params.id);",
      "  const updatedItem = req.body;",
      "  try {",
      "    const item = await prisma.${1:Item}.update({ where: { id }, data: updatedItem });",
      "    res.status(200).json(item);",
      "  } catch (error) {",
      "    if (error.code === 'P2025') return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(400).json({ message: 'Error al actualizar el elemento' });",
      "  }",
      "};",
      "",
      "// Eliminar un elemento por ID",
      "export const delete${1:item} = async (req, res) => {",
      "  const id = parseInt(req.params.id);",
      "  try {",
      "    await prisma.${1:Item}.delete({ where: { id } });",
      "    res.status(204).send();",
      "  } catch (error) {",
      "    if (error.code === 'P2025') return res.status(404).json({ message: 'Elemento no encontrado' });",
      "    res.status(500).json({ message: 'Error al eliminar el elemento' });",
      "  }",
      "};"
    ],
    "description": "Estructura básica para un controlador que maneja operaciones CRUD en una base de datos usando Prisma."
  }
}
